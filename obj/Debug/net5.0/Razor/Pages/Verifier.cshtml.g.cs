#pragma checksum "C:\Users\anubh\OneDrive\Desktop\verified id\active-directory-verifiable-credentials-dotnet\2-asp-net-core-api-user-signin\Pages\Verifier.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "b73caa8bbb4ee27bfae39a912c0a5cbd4badca88b4d53287396004fbebabb311"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreVerifiableCredentials.Pages.Pages_Verifier), @"mvc.1.0.razor-page", @"/Pages/Verifier.cshtml")]
namespace AspNetCoreVerifiableCredentials.Pages
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\anubh\OneDrive\Desktop\verified id\active-directory-verifiable-credentials-dotnet\2-asp-net-core-api-user-signin\Pages\_ViewImports.cshtml"
using AspNetCoreVerifiableCredentials;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"b73caa8bbb4ee27bfae39a912c0a5cbd4badca88b4d53287396004fbebabb311", @"/Pages/Verifier.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"f52a5d6c9bd82abada10682f8d3452885ce4d996eb92a2218cdf2245c15d05c3", @"/Pages/_ViewImports.cshtml")]
    #nullable restore
    public class Pages_Verifier : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\anubh\OneDrive\Desktop\verified id\active-directory-verifiable-credentials-dotnet\2-asp-net-core-api-user-signin\Pages\Verifier.cshtml"
  
    ViewData["Title"] = "Verifier";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"           <div style=""text-align: center;"">
                <img src=""VerifiedCredentialExpert-icon.png"" height=200px; />
                <h1>Verifiable Credential Expert Verification</h1>
        
            <button type=""button"" id=""sign-in"" class=""button"">VERIFY CREDENTIAL</button>
            <div id=""qrText""  style=""display:none;"">
                <p class=""small-text"">
                    <img src=""authenticator-icon.png"" alt=""Authenticator icon"" class=""icon-small""><br>
                    Scan with Microsoft Authenticator
                </p>
            </div>
            <a id=""deeplink"" style=""display: none;margin-top: 10px;"">Tap to open Authenticator on mobile</a>
            <div id=""qrcode"" style=""text-align: center""></div>
            <div id=""pinCodeText"" style=""display: none""></div>

            <div id=""message-wrapper"" class=""margin-bottom-75 margin-top-75"" style=""display: none"">
               <i class=""fas fa-user-check green icon-text-large margin-bottom-25""></i>
      ");
            WriteLiteral(@"         <div id=""message""></div>
                <br />
               <div id=""subject""></div>
                <br />
               <div id=""payload""></div>
            </div>
            <div id=""error-wrapper"" class=""margin-bottom-75 margin-top-75"" style=""display: block"">
               <div id=""errormsg""></div>
                <br />
            </div>

            <script src=""qrcode.min.js""></script>
            <script>
                var signIn = document.getElementById('sign-in');
                var signOut = document.getElementById('sign-out');
                var display = document.getElementById('display');
                var qrcode = new QRCode(""qrcode"", { width: 300, height: 300 });
                var respPresentationReq = null;

                signIn.addEventListener('click', () => {
                    fetch('/api/verifier/presentation-request')
                        .then(async function(response) {
                            if (!response.ok)
                 ");
            WriteLiteral(@"           {
                                console.log('Something went wrong');
                                const errorInfo = await response.json();
                                console.log('error:', errorInfo.error_description);
                                document.getElementById(""errormsg"").innerHTML = errorInfo.error_description;
                                return;
                            }
                            else
                            {
                                console.log (response);
                                respPresentationReq = await response.json();
                                if( /Android/i.test(navigator.userAgent) ) {
                                    console.log(`Android device! Using deep link (${respPresentationReq.url}).`);
                                    window.location.href = respPresentationReq.url; setTimeout(function () {
                                    window.location.href = ""https://play.google.com/store/apps/d");
            WriteLiteral(@"etails?id=com.azure.authenticator""; }, 2000);
                                } else if (/iPhone/i.test(navigator.userAgent)) {
                                    console.log(`iOS device! Using deep link (${respPresentationReq.url}).`);
                                    window.location.replace(respPresentationReq.url);
                                } else {
                                    console.log(`Not Android or IOS. Generating QR code encoded with ${message}`);
                                    qrcode.makeCode(respPresentationReq.url);
                                    document.getElementById('sign-in').style.visibility = ""hidden"";
                                    document.getElementById('qrText').style.display = ""block"";
                                }
                            }
                            console.log (response);
                        })
                        .catch(function(error) {
                                console.log('Something went wrong");
            WriteLiteral(@": ' + error);
                                document.getElementById(""errormsg"").innerHTML = error;
                                return;
                                })
                        .then(function statuscheck(){
                            var checkStatus = setInterval(function () {
                                fetch('api/verifier/presentation-response?id=' + respPresentationReq.id )
                                    .then(response => response.text())
                                    .catch(error => document.getElementById(""message"").innerHTML = error)
                                    .then(response => {
                                        if (response.length > 0) {
                                            console.log(response)
                                            respMsg = JSON.parse(response);
                                            // QR Code scanned
                                            if (respMsg.status == 'request_retrieved') {
       ");
            WriteLiteral(@"                                         document.getElementById('message-wrapper').style.display = ""block"";
                                                document.getElementById('qrText').style.display = ""none"";
                                                document.getElementById('qrcode').style.display = ""none"";
                                                document.getElementById('message').innerHTML = respMsg.message;
                                            }
                                    
                                            if (respMsg.status == 'presentation_verified') {
                                                document.getElementById('message').innerHTML = respMsg.message;
                                                document.getElementById('payload').innerHTML = ""Payload: "" + JSON.stringify(respMsg.payload);
                                                document.getElementById('subject').innerHTML = respMsg.firstName +"" "" + respMsg.lastName +"" is a Verifia");
            WriteLiteral(@"ble Credential Expert"";
                                                clearInterval(checkStatus);
                                            }

                                        }
                                    })
                            }, 1500); //change this to higher interval if you use ngrok to prevent overloading the free tier service
                        });

                });
            </script>
            </div>

");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AspNetCoreVerifiableCredentials.Pages.VerifierModel> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspNetCoreVerifiableCredentials.Pages.VerifierModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspNetCoreVerifiableCredentials.Pages.VerifierModel>)PageContext?.ViewData;
        public AspNetCoreVerifiableCredentials.Pages.VerifierModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
